Skin Type Checker - Web Application
This is a web application that allows users to upload an image or take a photo using their camera to check their skin type. Based on the skin type, it will recommend products to enhance the user's skin health.

Features:
Upload a clear photo of your skin.
Take a picture using your device's camera.
Detect skin type using a pre-trained machine learning model.
Display the skin type with confidence percentage.
Recommend products for the detected skin type.

1. Clone the repository
git clone https://github.com/your-username/skin-type-checker.git
2. Navigate to the project folder
cd skin-type-checker
 Set up a virtual environment (optional but recommended)
 python3 -m venv venv
source venv/bin/activate  # For Linux/Mac
venv\Scripts\activate     # For Windows
4. Install required dependencies
pip install -r requirements.txt


RUNNING FLASK SERVER
1. Run the Flask server
 python app.py
 2. Open a web browser and navigate to http://127.0.0.1:500

 Project Structure

 skin-type-checker/
│
├── app.py              # Main Flask backend
├── static/
│   ├── app.js          # JavaScript for frontend functionality
│   ├── styles.css      # CSS for styling
│
├── templates/
│   └── index.html
 └── frontend.html       # Main HTML for the frontend
│
├── requirements.txt    # Python dependencies
└── README.md           # Project documentation

Backend (Flask):
app.py: Handles the backend logic, including serving the web pages and handling image uploads for processing via the machine learning model.
Frontend:
index.html: Contains the HTML structure and forms.
app.js: JavaScript logic for opening the camera, capturing images, and uploading them to the backend.
Dependencies:
Flask: Python web framework for serving the web app.
Flask-Cors: To handle cross-origin requests if the frontend and backend are hosted separately.

Dependencies
pip install -r requirements.txt
python3 -m venv venv
source venv/bin/activate  # On Windows, use venv\Scripts\activate

SCREENSHORT
![Screenshot (5)](https://github.com/user-attachments/assets/6c87ee21-785e-4861-803d-5228c9d7da5a)
![Screenshot (6)](https://github.com/user-attachments/assets/1930fbee-72eb-44e3-9233-4f48d3183795)
![Screenshot (7)](https://github.com/user-attachments/assets/697c6658-e02d-4ead-afc7-ded33c978804)
![Screenshot (8)](https://github.com/user-attachments/assets/e5a827b5-ed4f-4674-bc77-2d9cb96603c8)
![Screenshot (9)](https://github.com/user-attachments/assets/72e72124-1fe0-40a3-8ad0-9746182408c5)
![Screenshot (10)](https://github.com/user-attachments/assets/a79e13af-82b4-4403-9dea-18571184e490)
![Screenshot (11)](https://github.com/user-attachments/assets/f38b29fc-da21-46df-b11c-cec84b1487b2)
![Screenshot (12)](https://github.com/user-attachments/assets/7316a8b7-257e-404b-b8f4-dabfeaa349fa)
![Screenshot (13)](https://github.com/user-attachments/assets/878820d0-780d-4177-941e-af4c189a47ec)
![Screenshot (14)](https://github.com/user-attachments/assets/8f336525-00b6-4008-9e6d-f42651930f10)



